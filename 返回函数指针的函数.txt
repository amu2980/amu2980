/*************************************************************************************************************
函数指针：类似于数组名，在C语言中函数名的实际就是函数所在空间的首地址，故也可声明相应类型的函数指针用于指向相
	应的实际函数，更深层次甚至可以声明函数指针数组和返回函数指针的函数

1.定义格式：声明函数指针时需要指出返回类型和所有形参类型，即对于指向int add(int a,int b);的函数指针可以声明为
	int (*p)(int ,int ) = add;这里的p即为指向add的函数指针，注意*p左右的括号不可省略，否则优先级原则p前面的*会
	和int结合从而变成int* p（int， int）；即被理解为对函数p的声明


指针函数：返回指针的函数，有必要区分于函数指针的概念


返回函数指针的函数：C语言不允许定义返回函数的函数，但可以定义返回函数指针的函数，即函数的返回值是一个指向另一
	个函数的指针，故对其返回值又可传入实参进行并列调用（如：fun1(a,b)(a,b);这里假设fun1的返回值是指向fan2的指针
	故后面两个参数即是传给fun2的实参）

1.定义格式：和普通函数的区别主要在于定义时函数的返回值类型，函数返回值的类型应该是指向某类函数的函数指针类型，
	但由于该类型实际书写方式未知，故可考虑采用typedef为该指针类型创建别名，然后同普通数据类型一样直接写在函数
	名之前表达返回该类型就行了（e.g:typedef int (funp)(int,int);这里的funp就是对int( )(int,int)类型的函数创建
	的别名，在定义返回该函数指针类型的函数时直接定义funp* fun(...){...}就行（注意：如果没有*将会报错，即上述所
	言，C语言不支持直接返回函数的函数），当然也可直接将该类型的指针创建别名即typedef int (*funp)(int,int);这里
	的funp即是对int(*)(int,int)类型的创建的别名，定义返回类型的函数时则不用加*，加*则会报错即funp fun(...){...}）
**************************************************************************************************************/