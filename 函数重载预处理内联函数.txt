/****************************************************************************************
1.函数重载：相同功能但 不同形参类型 或 数量 的同名函数创建（这里的不同形参类型指
	两个同名函数中至少存在一个形参占位中的类型对应不一致）

	1.1.不同形参类型(总和数)
		e.g.	void fun(int a); 和 void fun(double a);
	（仅返回值类型不同不可定义）
		e.g.	void fun(int a); 和 int fun(int a);           ×

注：仅类型上的不同可以用函数模板更好的地实现

	1.2.不同参数数量
		e.g.	void fun(int a, int b); 和 void fun(int a, int b, int c);

	1.3.不同形参类型且不同形参数量
		e.g.	void fun(int a); 和 void fun(double a, double b);

	1.4.定义 相同形参数量 且 形参类型总和数 一致时可以理解为按参数传入顺序定义的重载，如：
		e.g.	void fun(int a, double b); 和 void fun(double a, int b);
		（但并不建议这样做，当传入的参数需要进行隐式转换的时候就会出现错误，如传入两个int）

	注意：不同功能不应该定义为重载
		e.g.	int fun(int a, int b){rerturn a+b;} 和 void fun(int a){cout << a;}

2.形参默认值：当参数传递不够时采用默认值作为参数

	2.1.形参默认值的声明位置：

		2.1.1.一般在函数的声明中给出，不在定义中给出

		2.1.2.仅当函数体定义在所有调用之前时可以在函数定义中给出（不常用）

	2.2.给出默认值的形参右侧的形参也必须给出默认值，即只能从左向右定义形参默认值

	2.3.全局声明和局部声明可以分别给出不同默认值（局部屏蔽全局），但同一作用域下不可
	重复给出默认形参（如在全局声明和全局定义中同时给出）


3.内联函数 inline：结合函数和宏定义于一体（规避宏定义的风险）：【用空间换时间的策略】

	3.1.注意：内联函数中不可出现循环和switch以及递归调用语句，否则【1】按一般函数进行处理

	3.2.内联函数不由预处理器管（宏定义由预处理器进行处理）

	3.3.内联函数一般用于代码较少调用较频繁的函数（<=5行代码）

	3.4.定义格式：在普通函数定义最前端加上inline关键字，如：inline int fun(...){...}，
		一般内联函数的声明和定义不分开，若选择分开，则应在定义和声明前面都加上inline关键字

注【1】：inline是一种请求而非命令，即使在函数前使用了inline关键字，当编译器觉得该函数
	过于复杂或不合适作为内联函数时仍然会将其作为一般函数处理

4.预处理宏定义：在编译前进行处理的指令（不属于C语言）

	4.1.预处理常用关键字：define, include, if, endif, undef, ifdef, ifndef, error， elif

	4.2.defined 不属于关键字，是运算符结合 if 使用

	4.3.#if defined A && defined B 可测试多个条件，#ifdef 只可测试一个条件（ifndef同理）

	4.4.#if --> #elif --> #endif 顺序使用

	4.5.带参数的宏传递的参数不可有副作用

	4.6.带参数的宏定义时一切都要有括号
*****************************************************************************************/