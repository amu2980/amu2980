/*****************************************************************************************
1.类类型：用于封装抽象出的方法和属性，包括数据抽象（数据）和行为抽象（函数）

	1.1.关键字：class, public, private, protected, this, final, override, mutable, explicit

	1.2.相较于结构体，类中成员包含数据和函数，且更便于保护必要成员的隐私

	1.3.类的成员函数可以定义在类中，也可以定义在类外【0】，定义在类外时，类中需要给出声明，
		且类外函数的定义前需要加上该类域名空间（eg: 有class time类，在类外定义成员函数时就
		需要在函数名前加上time::）

	1.4.类对于其成员的保护用public,private,protected关键字实现，在类定义中可以任意顺序多
		次出现，但注意同一数据成员仅可在上述三种之一后方声明，否则出现歧义（error）

	1.5.类的定义类似结构体，但在使用时不需要像【1】结构体（struct）一样带上class关键字，
	（当然，也可以带上）其访问成员的方法同结构体一样（类变量用 . ,类指针用 ->）

	1.6.使用类定义实例时，多个实例的定义为其分别分配数据空间存储数据，但成员函数的空间仅分
		配一次，即不同类实例共享成员函数 （不同类实例的成员函数首地址相同）

	1.7.类也可以使用typedef定义别名，但意义相对不大

	1.8.this关键字是一个指针，指向当前调用的类，对于每一个类，都有属于自己的this指针，可以
		用于告诉编译器区分成员函数的同名的形参变量（实际上this指针是在定义任何成员函数时自动
		作为一个隐式的形参传入函数的）【2】

	注【0】：在类中定义和类外定义实际上存在区别，编译器会尽量将类中定义的成员函数视为内联
	函数（即使没有显式声明为inline），而将类外定义的函数视为一般函数处理，故非必要情况一般
	建议成员函数都在类外定义（尤其是构造函数和析构函数）

	注【1】：事实上c++的结构体声明实例时可以不用再带上struct关键字，当然为了兼容C语言带上也
	可以

	注【2】：实际上避免形参同名的一个良好习惯是用成员名加上“_”，用以直接区分成员和形参，而
	不是采用this指针的方式，this指针的使用的必要性往往是在需要返回对象本身或本对象引用的成员函数中。


2.使用类的步骤：
	2.1.对问题进行抽象：明确所需数据和函数，以及对各数据对外可见性的判断

	2.2.声明类：
		用class关键字在头文件中给出类和类中成员的声明

	2.3.实现类：
		在cpp文件中给出对应头文件中的类中成员函数和静态成员的定义

	2.4.使用类：
		使用自定义的类类型声明实例

	注：在使用类声明实例的行之前应当存在类定义（本体），否则无法声明实例，但若是只声明类
	指针和引用，则可以采用类前向声明为 class 类名; 放在声明前的行中


3.访问器（getter）和更改器（setter）：

	3.1.定义：访问器与更改器是c++类定义中的一个良好原则和习惯，访问器是指以get开头的函数名的
	成员函数，更改器是指以set开头的函数名的成员函数（当然，并不强制，实际上对于bool类型的数据
	，定义以is开头的访问器会更好）
	
	3.2.意义：对于类定义中的数据成员应该尽最大可能将其声明在私有段，其次是保护段，最后才是公
	有段，而对于前两者而言，外部无法与之取得联系，为解决这一问题，可以采用间接访问的原则，即
	使用访问器和更改器，其好处在于：

		3.2.1.相较于提供直接对外开放的数据成员，采用访问器和更改器的方式能够更好的实现代码的可
		维护性，同时前者违背了抽象封装的原则

		3.2.2.对于一些对值具有特定要求的数据成员（如年龄不能小于0），采用访问器和更改器的方式
		可以对修改的值进行判断，而相较之下对外开放该类数据成员时就需要特别小心地使用以保证不会
		输入不期望的赋值
**********************************************************************************************/